{"componentChunkName":"component---src-components-post-tsx","path":"/posts/2015/2015-08-14_Excel/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Excel-ing at the speed of C\",\n  \"date\": \"2015-08-14T00:00:00.000Z\",\n  \"summary\": \"How to dynamically load native code from Excel\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Excel is a great tool, but some of its most powerful features are ancient or obscurely documented. Case in point: Excel includes a Visual Basic scripting system allowing for creation of custom macros and programmatic control over documents. It can be quite useful, but is ultimately limited by the VBA language and type system — stuck in a time before .NET, lacking even basic unsigned integer support. So what if we could break out of VBA and call into our own DLL?`), mdx(\"p\", null, `Thankfully, Excel can interop with basically any native DLL as long as it follows the right esoteric conventions. For example, let’s assume we have a simple C program that builds a DLL. It contains a method that takes an input and returns it.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cpp\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cpp\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `extern`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"C\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `GetValue`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), ` value `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `{`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `return`), ` value`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `}`)))), mdx(\"p\", null, `In VBA, we can access this function like so:`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"vb\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-vb\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vb\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `'' Declare the signature of the external function \"GetValue\" and where to find it`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Private`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Declare`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`), ` GetValue `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Lib`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"C:\\\\bin\\\\MyLib.dll\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `ByVal`), ` value `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Long`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Long`), `\n\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `''' Declare a method we can run in Excel editor for debugging/testing`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Public`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Sub`), ` TestMyLib`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Dim`), ` retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Long`), `\n\n    retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` GetValue`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `5`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `''' Will set retVal to 5`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `End`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`)))), mdx(\"p\", null, `There are several things to note here:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The C/C++ library must define methods as `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `extern \"C\"`), ` so that they are exported without any C++ style name mangling. This is necessary so that VBA can find the method by name.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The data types in C and VB must match in size. An `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `int`), ` in C being 32-bit corresponds to the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Long`), ` 32-bit type in VB, not the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Integer`), ` type which is only 16 bits. Mismatches will cause either an Overflow error or a crash.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `The VB method declaration requires specifying the path to the DLL. Normally this needs to be absolute; we’ll later discuss a workaround.`)), mdx(\"p\", null, `Let’s take another step and say we want to read in a string storing an error code, convert it to a number, and send back a description of it.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cpp\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cpp\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `extern`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"C\"`), ` VARIANT `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `GetErrorDescription`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), ` BSTR bstrErrorCode `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `{`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `unsigned`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `long`), `   dwErrorCode      `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `const`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `char`), `    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `*`), ` pszErrName       `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, `NULL`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    BSTR            bstrErrorMessage `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, `NULL`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), `             cchErrorMessage  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), `             cchErrName       `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    VARIANT         vnt`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// Parse integer from input string`), `\n    dwErrorCode `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `wcstoul`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `bstrErrorCode`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, `NULL`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// Call helper method that looks up the string for this error code`), `\n    pszErrName `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `GetErrorNameFromCode`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), ` dwErrorCode`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, `NULL`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    cchErrName `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `strlen`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `pszErrName`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// Convert message to UTF-16 so that we can store it in BSTR`), `\n    cchErrorMessage `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `MultiByteToWideChar`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `CP_UTF8`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` pszErrName`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` cchErrName`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, `NULL`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    bstrErrorMessage `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `SysAllocStringLen`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `unsigned`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `int`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `cchErrorMessage`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `MultiByteToWideChar`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `CP_UTF8`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` pszErrName`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` cchErrName`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` bstrErrorMessage`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` cchErrorMessage`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// Return as a VARIANT.`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// This is necessary to prevent VBA callers from mangling the string by`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// attempting to convert to UNICODE (VBA does this if the return value is just BSTR).`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `VariantInit`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `&`), `amp`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `amp`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `amp`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `amp`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `amp`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `vnt`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    vnt`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `vt `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` VT_BSTR`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n    vnt`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `bstrVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` bstrErrorMessage`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `}`)))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"vb\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-vb\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vb\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Private`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Declare`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`), ` GetErrorDescription `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Lib`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"C:\\\\bin\\\\MyLib.dll\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `ByVal`), ` value `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` LongPtr`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Variant`), `\n\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `''' Declare a method we can run in Excel editor for debugging/testing`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Public`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Sub`), ` TestMyLib`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Dim`), ` retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `String`), `\n\n    retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` GetErrorDescription`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `StrPtr`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"5\"`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `End`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`)))), mdx(\"p\", null, `Clearly this is bit more complex.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `A string must be passed as a `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), `. Not `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `char`), `, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `wchar`), `, `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `std::string`), `, or anything else. A `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), ` is a special string data type designed for interop, containing a length-prefix, an array of wchar, and two null-terminating characters.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Despite Excel using `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), ` internally and our method taking `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), `, Excel will take any `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `String`), ` parameter or return value in the VBA Declare statement and run it through a Unicode to ASCII conversion. To avoid the mess this causes, we pass a pointer to the incoming `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), ` and return a `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `VARIANT`), ` type containing a `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `BSTR`), `. That avoids any automatic conversions.`)), mdx(\"h2\", null, `Dynamic Paths`), mdx(\"p\", null, `At this point we can start using our native code do some heavy lifting, but we’re still stuck with a hard-coded path to the binary in our VBA. That’s rather limiting. We can leverage what we know so far, however, to hack in a solution.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"vb\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-vb\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-vb\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Private`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Declare`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`), ` LoadLibrary `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Lib`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"kernel32\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Alias`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"LoadLibraryA\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `ByVal`), ` lpLibFileName `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `String`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` LongPtr\n\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Private`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Declare`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`), ` GetErrorDescription `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Lib`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"MyLib.dll\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `ByVal`), ` value `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` LongPtr`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Variant`), `\n\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Public`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Sub`), ` TestMyLib`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Static`), ` hasLoadedLib `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Boolean`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Dim`), ` retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `As`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `String`), `\n\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `If`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Not`), ` hasLoadedLib `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Then`), `\n        `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `If`), ` LoadLibrary`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `ThisWorkbook`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `Path `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `&`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"\\\\\"`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `&`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"MyLib.dll\"`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `<`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `>`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `0`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Then`), `\n            hasLoadedLib `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token boolean\"\n  }, `True`), `\n        `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `End`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `If`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `End`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `If`), `\n\n    retVal `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` GetErrorDescription`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `StrPtr`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, `\"5\"`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `End`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, `Function`)))), mdx(\"p\", null, `First, we modify the Declare statement for our lib to mention just the filename. Then, since system libraries are accessible without a full path, we can call the system’s LoadLibrary method to dynamically load our DLL from whatever path we want — in this case, the same folder as the workbook itself. Once the DLL is loaded into memory, Excel will happily use it without a second thought.`), mdx(\"h2\", null, `References`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://msdn.microsoft.com/en-us/library/office/bb687915.aspx\"\n  }, `How to: Access DLLs in Excel`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://blog.nkadesign.com/2013/vba-unicode-strings-and-the-windows-api/\"\n  }, `VBA: Unicode Strings and the Windows API`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/archive/blogs/ericlippert/erics-complete-guide-to-bstr-semantics\"\n  }, `Eric’s Complete Guide To BSTR Semantics`))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"__typename":"ArticleFrontmatter","date":"2015-08-14T00:00:00.000Z","formattedDate":"August 14, 2015","title":"Excel-ing at the speed of C","subtitle":null,"excerpt":null,"summary":"How to dynamically load native code from Excel"}}},"pageContext":{"id":"282842c4-8d24-52a4-8bca-9f931c1ea3be"}},"staticQueryHashes":[]}